// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract RequireAssertRevert {

    address public owner;
    mapping(address => uint) public balances;

    constructor() {
        owner = msg.sender;
    }

    // Function to deposit Ether into the contract
    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than zero");
        balances[msg.sender] += msg.value;
    }

    // Function to withdraw Ether from the contract
    function withdraw(uint amount) public {
        require(amount > 0, "Withdraw amount must be greater than zero");
        require(amount <= balances[msg.sender], "Insufficient balance");
        
        balances[msg.sender] -= amount;
        payable(msg.sender).transfer(amount);
    }

    // Function to transfer Ether to another address
    function transfer(address to, uint amount) public {
        require(to != address(0), "Invalid address");
        require(amount > 0, "Transfer amount must be greater than zero");
        require(amount <= balances[msg.sender], "Insufficient balance");
        
        balances[msg.sender] -= amount;
        balances[to] += amount;
    }

    // Function to demonstrate assert statement
    function checkInvariant() public view {
        // Example invariant: owner's balance should always be greater than 0
        assert(balances[owner] >= 0);
    }

    // Function to demonstrate revert statement
    function specialFunction() public view {
        if (msg.sender != owner) {
            revert("Only the owner can call this function");
        }
    }
}
